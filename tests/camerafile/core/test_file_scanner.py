# Generated by Qodo Gen

import pytest


class TestFileScanner:

    # Scanning a directory with subdirectories and multiple files adds them to not_loaded_files
    def test_files_in_subdirectories_added_to_not_loaded_files(self, tmp_path):
        # Given
        from camerafile.core.FileScanner import FileScanner
        from camerafile.core.Constants import IMAGE_TYPE, VIDEO_TYPE, AUDIO_TYPE

        # Create test directories and files
        root_dir = tmp_path / "test_dir"
        root_dir.mkdir()

        sub_dir1 = root_dir / "sub_dir1"
        sub_dir1.mkdir()

        sub_dir2 = root_dir / "sub_dir2"
        sub_dir2.mkdir()

        # Create image, video and audio files in root directory
        image_file = root_dir / "test_image.jpg"
        video_file = root_dir / "test_video.mp4"
        audio_file = root_dir / "test_audio.mp3"

        image_file.write_text("dummy image content")
        video_file.write_text("dummy video content")
        audio_file.write_text("dummy audio content")

        # Create additional files in subdirectories
        sub_image_file1 = sub_dir1 / "sub_test_image1.jpg"
        sub_image_file2 = sub_dir1 / "sub_test_image2.jpg"
        sub_video_file = sub_dir2 / "sub_test_video.mp4"

        sub_image_file1.write_text("dummy sub image content 1")
        sub_image_file2.write_text("dummy sub image content 2")
        sub_video_file.write_text("dummy sub video content")

        # Mock state object
        class MockState:
            def should_be_ignored(self, file_path):
                return False

        # When - call the static method directly
        new_files, new_dirs = FileScanner.update_from_disk(root_dir, MockState(), {})

        # Then
        assert len(new_files) == 6
        assert "test_image.jpg" in new_files
        assert "test_video.mp4" in new_files
        assert "test_audio.mp3" in new_files
        assert "sub_dir1/sub_test_image1.jpg" in new_files
        assert "sub_dir1/sub_test_image2.jpg" in new_files
        assert "sub_dir2/sub_test_video.mp4" in new_files

        # Verify file descriptions are correct
        for file_path, file_desc in new_files.items():
            assert file_desc.file_size > 0
            assert isinstance(file_desc.relative_path, str)

        # Verify directories are found
        assert len(new_dirs) == 2
        assert "sub_dir1" in new_dirs
        assert "sub_dir2" in new_dirs

    # Empty directory returns empty not_loaded_files and ignored_files
    def test_empty_directory_returns_empty_collections(self, tmp_path):
        # Given
        from camerafile.core.FileScanner import FileScanner

        # Create empty directory
        empty_dir = tmp_path / "empty_dir"
        empty_dir.mkdir()

        # Mock state object
        class MockState:
            def should_be_ignored(self, file_path):
                return False

        # When - call the static method directly
        new_files, new_dirs = FileScanner.update_from_disk(empty_dir, MockState(), {})

        # Then
        assert len(new_files) == 0
        assert isinstance(new_files, dict)
        assert len(new_dirs) == 0
        assert isinstance(new_dirs, dict)
